<?xml version="1.0"?>
<project name="joz" default="build" basedir="..">

    <property name="root.dir" value="."/>

    <!-- The buildconf.properties file MUST be loaded before build.properties.
         Ideally the order should not matter, but not all directories use
         buildconf.properties.  To support a transition period we mandate
         that it must be loaded before build.properties allowing it to take
         precedence.  See the Tumri/build/default.buildconf.properties for
         more info.  -->
    <property name="buildconf.properties" value="../../buildconf.properties"/>
    <fail message="Must configure tree first.">
        <condition>
            <not> <available file="${buildconf.properties}"/> </not>
        </condition>
    </fail>
    <property file="${buildconf.properties}"/>

    <!-- This property file contains various parameters that in general
         DO NOT change.  -->
    <property file="${root.dir}/build/build.properties"/>

    <import file="joz.xml"/>
    <import file="testsuite.xml"/>

    <path id="project.class.path">
        <fileset dir="${ext.lib.dir}">
            <include name="*.jar"/>
        </fileset>
	<fileset dir="${zini.lib.dir}">
            <include name="*.jar"/>
	</fileset>
	<fileset dir="${utils.lib.dir}">
            <include name="*.jar"/>
	</fileset>
	<fileset dir="${cma.lib.dir}">
            <include name="*.jar"/>
	</fileset>	
 	<fileset dir="${caa.lib.dir}">
             <include name="*.jar"/>
   	</fileset>	
	<fileset dir="${dist.dir}">
	    <include name="*.jar"/>
	</fileset>
    </path>

    <!-- ****************************************************************** -->

    <target name="init">
    	<mkdir dir="${stage.dir}"/>
        <mkdir dir="${classes.dir}"/>
    	<mkdir dir="${dist.dir}"/>
    </target>

    <!-- ****************************************************************** -->

    <target name="clean"
            description="Remove all build objects from the tree.">
        <delete dir="${dist.dir}"/>
    	<delete dir="${stage.dir}"/>
    </target>

    <!-- ****************************************************************** -->

    <target name="copy-non-java-files" depends="init">
	<copy todir="${dist.dir}/conf">
	    <fileset dir="${src.dir}/conf">
		<include name="*.properties"/>
		<include name="*.xml"/>
	    </fileset>
	</copy>
	<replace file="${dist.dir}/conf/jozLog4j.xml"
		 token="value=&quot;/@error.logs.dir@/"
		 value="value=&quot;${error.logs.dir}/"/>
    </target>

    <!-- ****************************************************************** -->

    <target name="build"
            depends="build-Joz-war,copy-non-java-files"
            description="Build everything.">
    </target>

    <!-- ****************************************************************** -->

    <target name="install"
            description="Install joz.">
	<!-- FIXME: Aahhh!  tomcat prefers the unzipped copy of the previous
	     war over the newly installed one.  -->
	<delete dir="${war.install.dir}/Joz"/>
	<!-- This used to copy *.war with a fileset but no error is signalled
	     if joz.war doesn't exist.  -->
	<copy file="${dist.dir}/joz.war" todir="${war.install.dir}"/>
	<copy todir="${conf.install.dir}">
	    <fileset dir="${dist.dir}/conf">
		<include name="*.properties"/>
		<include name="*.xml"/>
	    </fileset>
	</copy>
    </target>

    <!-- ****************************************************************** -->

    <!-- Targets invoked by the top level build harness don't have
         descriptions as they're not intended to be manually invoked.  -->

    <target name="top-clean" depends="clean"/>

    <target name="top-build" depends="build"/>

    <target name="top-install" depends="install"/>

    <target name="top-build-doc">
	<!-- FIXME: wip -->
    </target>

    <target name="top-install-doc">
	<!-- FIXME: wip -->
    </target>

    <target name="top-run-tests" depends="run-tests"/>

</project>
